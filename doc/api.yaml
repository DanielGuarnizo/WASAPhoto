openapi: 3.0.0
servers:
  - url: "http://localhost:3000"
info:
  title: Fantastic Coffee (decaffeinated)
  description: Fantastic Coffee (decaffeinated), the skeleton project for Web and Software architecture course
  version: 1.0.0
security:
  - bearerAuth: []
components:   
  securitySchemes:
    bearerAuth:     # arbitrary name for the security scheme
      description: "arbitrary name for the security scheme"       
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
  schemas:
    ID: 
      title: General ID format 
      description: "Specifies the format of a unique identifier (UUID)."
      type: string 
      pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$'
      minLength: 36
      maxLength: 36
      example: 1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d
      readOnly: true
      
    Comment:
      title: Comment of a post
      description: |-
        comment provided by and user to an images of another user
      type: object 
      properties:
        # identifier of the post to which the comment belongs 
        post_id:
          $ref: "#/components/schemas/ID"

        # identifier of the comment/like in a post, given that we cann have many of the same user
        comment_id:
          $ref: "#/components/schemas/ID"

        # id of the user who does the comment/like, this will help us identify from whom the comment/like is
        user_id: 
          $ref: "#/components/schemas/ID"
          
        # the comment per se
        body:
          type: string
          description: "String representing a comment of a user"
          pattern: "^[a-zA-Z0-9]+$"
          minLength: 1
          maxLength: 2204
    
    Like:
      title: Like of a post
      description: |-
        like from a user to a photo/post of another user 
      type: object
      properties:
        # identifier of the post to which the like belongs  
        post_id:
          $ref: "#/components/schemas/ID"
        
        like_id:
          $ref: "#/components/schemas/ID"
        # id of the user who does the comment/like, this will help us identify from whom the comment/like is
        user_id: 
          $ref: "#/components/schemas/ID"

    Image:
      title: image of a post 
      description: |-
        An images regargly an user, such image will be the main component of an user post 
      type: object 
      properties:
        image:
          type: string
          description: "Binary representation of a image"
          format: base64
          minLength: 1  
          maxLength: 1048576
          
    Post:
      title: Post of an user on his profile 
      description: |- 
        a post make from an user that will be posted in his profile, this post contains an image which could have eventually likes and comment from others user 
      type: object
      properties:
        # identifier of the user whose did the post 
        user_id: 
          $ref: "#/components/schemas/ID"
        # identifier that will hepl us to identify the post of a user 
        post_id: 
          $ref: "#/components/schemas/ID" 
          
        # this specify the date in which the post was done and the time 
        uploaded:
          type: string
          description: "this specify the date in which the post was done and the time"
          format: data-time
          pattern: ^\d{4}-\d{2}-\d{2}\d{2}:\d{2}:\d{2}$
          maxLength: 19 
          minLength: 19
        
        # the main object of this app are the image
        image:
          $ref: "#/components/schemas/Image"
        
        # collecttion of possible comments the post could have (i am not sure if thsi part have to be in the properties)
        comments:
          type: array
          description: "collecttion of possible comments the post could have (i am not sure if thsi part have to be in the properties)"
          items:  
            $ref: "#/components/schemas/Comment"
          minItems: 0
          maxItems: 2000
            
        # number of comments the post has 
        numberOfComments:
          type: integer
          description: "number of comments the post has"
        
        # collection of possible likes the post could have (i am not sure if thsi part have to be in the properties)
        likes:
          type: array
          description: "collection of possible likes the post could have (i am not sure if thsi part have to be in the properties)"
          items: 
            $ref: "#/components/schemas/Like"
          minItems: 0
          maxItems: 2000
            
        # number of likes the post could have
        numberOfLikes:
          type: integer
          description: "number of likes the post could have"

    Following:
      title: Following
      type: object
      description: Represents a user following other users.
      properties:
        follower:
          $ref: "#/components/schemas/ID"
          description: The user who is following.
        followed:
          type: array
          description: List of users being followed.
          items:
            $ref: "#/components/schemas/ID"

    User:
      title: User
      description: User schema.
      type: object
      properties:
        user_id:
          $ref: "#/components/schemas/ID"
        username:
          type: string
          description: "name of the user profile"
          pattern: 'ˆ.*?$' 
          example: "Daniel Guarnizo"
          minLength: 3 
          maxLength: 16         
    
    Profile:
      title: Profile of an user on the app 
      description: |-
        the profile for each user will contain information related to it, such as how many photos has been upload until now, how many follower and another user information
      type: object 
      properties: 
        user:
          $ref: "#/components/schemas/User"
        photos:
          type: array 
          description: an array of photos of a user
          items:
            $ref: "#/components/schemas/Post"
          minItems: 0 
          maxItems: 2200
            
        # indicates how many post/photos the user has in it's own profile
        numberOfPosts:
          type: integer
          description: "Number of posts/photos the user has in their profile."
          
        # number of follower indicates how many people follow this profile 
        userFollowers:
          type: integer
          description: "number of follower indicates how many people follow this profile "
          example: 2 # so this indicates that only two persons follow this user
        
        # number of other profiles the user follow 
        userFollowing:
          type: integer
          description: "number of other profiles the user follow "
          example: 1985 

    Stream:
      title: stream of a user
      description: |-
        the stream will show the post of all the following person of the user 
      type: object
      properties:
        # this wil be a collection of photos/post the user will see of all the others profiles his following 
        photos:
          type: array 
          description: "this wil be a collection of photos/post the user will see of all the others profiles his following "
          items:
            $ref: "#/components/schemas/Post"
          minItems: 0
          maxItems: 2000

tags: 
  - name: Posts
    description: requests made in posts of users 
  - name: Users
    description: requests made by users 
  - name: Profile
    description: request made in profiles of users 

paths:
  # DO LOGING
  /session: 
    post:
      tags: ["login"]
      summary: Logs in the user 
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin 
      requestBody:
        description: User details
        content:
          application/json: 
            schema:
              type: object 
              properties:
                name:
                  type: string 
                  example: Maria 
                  pattern: 'ˆ.*?$'
                  minLength: 3 
                  maxLength: 16
        required: true 
      responses:
        '201':
          description: User log-in action successful 
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    $ref: "#/components/schemas/ID"
                    # change here if you decide to use an integer # or any other type of identifier
                    #type: string
                    #example: 1a2b3c4d5e6f7A8B9C0D1E2F3A4B5C6D
                    
  
  # LIKE PHOTO
  # here we want to add a like to a post 
  
  
  /likes/:
    post:
      security:
        - bearerAuth: []
      tags:
        - Posts
      operationId: likePhoto
      summary: Add a like to a post
      description: |- 
        an user is trying to add a like to a post of another user 
      
          
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Like"}
      responses: 
        "201":
          # in this case by created we mean that we add a like to the array of likes of a post 
          description: Like successfully created 
          # we need a response body given that we are creating a new resources
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Like"} 
              # means that the responses of the request is in a json format and indicates how it's organizes, what it has ecc...
              
        '400':
          description: Bad request. Invalid user data.
            
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal server error.
  
  # UNLIKE PHOTO
  # here we want to remove a like that we previously added to a post 
  /likes/{likeid}:
    delete: 
      security:
        - bearerAuth: []
      tags:
        - Posts
      operationId: unlikePhoto
      summary: Remove a like from a post 
      description: |- 
        an user want to remove e like that previously add to a post of another user 
      parameters:
        - name: likeid
          in: path
          schema:
            $ref: "#/components/schemas/ID"
          required: true 
        
      responses:
        # use status code 204 instead of 200, because with 200 there is response body with additional information which can be misleading in the context of a DELETE operation. with 204 indicates that the deletion operation was successful
        
        "204":
          description: |-
            specify if the like of an user post was correctly deletated 
        '400':
          description: Bad request. Invalid user data.
            
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Resource not found 
          
        "500":
          description: Internal server error 
  
  # COMMENT PHOTO        
  #here we want to add a comment to a post (it could be to the self post or to post of another user)
  /comments/:
    post:
      security: 
        - bearerAuth: []
      tags:
        - Post
      operationId: commentPhoto
      summary: add a comment to a post
      description: |- 
        an user want to add a comment to a post of him self of another user post 
          
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Comment"}
      responses:
        "201":
          description: Comment successfully created 
          # we need a response body given that we are creating a new resources
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Comment"}
              
        '400':
          description: Bad request. Invalid user data.
            
        '401':
            $ref: '#/components/responses/UnauthorizedError'
        
        '500':
          description: Internal server error.
  
  # UNCOMMENT PHOTO
  # here we want to remove a comment but with a simple constraint that only the "owner" of the comment can delete it's own comment  
  /comments/{commentid}:
    delete:
      security: 
        - bearerAuth: []
      tags: 
        - Posts
      operationId: uncommentPhoto
      summary: Remove a comment from a post
      description: |-
        An user want to remove a comment done in a post 
      parameters:
        - name: commentid
          in: path
          schema:
            $ref: "#/components/schemas/ID"
          required: true 
          
      responses:
        "204":
          description: |- 
            specify if the comment in the user post was correctly deletated 
        '400':
            description: Bad request. Invalid user data.
            
        '401':
            $ref: '#/components/responses/UnauthorizedError'
            
        "404":
          description: Resource not found
          
        "500":
          description: Internal server error 
          
  # SET MY USER NAME
  # an user want to change it's username
  /users/{userid}:
    # using the patch method we are gonna to apply some modification to the resourrces without changing the complete resource 
    patch:
      security:
        - bearerAuth: []
      tags:
        - Profile
        - Users
      operationId: setMyUserName
      summary: User wants to change the username
      description: An user wants to change the username of its own profile.
      parameters:
        - name: userid
          in: path
          schema:
            $ref: "#/components/schemas/ID"
          required: true
      requestBody:
        description: New username for the user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newUsername:
                  type: string
      responses:
        "200":
          description: User update name was successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad Request
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: User not found
        "500":
          description: Internal server error
    
  # UPLOAD PHOTO 
  # the user want to upload a post/photo to his profile 
  /users/{userid}/posts:
    post:
      security: 
        - bearerAuth: []
      tags: 
        - Profile
        - Users
      operationId: uploadPost
      summary: upload post to profile
      description: |-
        user want to upload a new post to it's own profile 
      parameters:
        - name: userid
          in: path
          schema:
            $ref: "#/components/schemas/ID"
          required: true
          
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Post"}
            
      responses:
        "201":
          description: Post eas created successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Post"}
        "400":
          description: Bad Request

        '401':
            $ref: '#/components/responses/UnauthorizedError'
        
        "404":
          description: Resource not found
          
        "500":
          description: Internal server error 
          
          
  # DELETE PHOTO  
  # the user want to remove a post/photo from his profile Cascading Deletion In this approach, when a post is deleted, all associated likes and comments are automatically deleted as well. This is known as cascading deletion, where the deletion of a parent resource triggers the deletion of its dependent resources.
  /users/{userid}/posts/{postid}:
    delete:
      security: 
        - bearerAuth: []
      tags:
        - Profile 
        - Users
      operationId: deletePhoto
      summary: Remove post from profile
      description: |-
        user want to remove post from his own profile 
      
      parameters:
        - name: userid
          in: path
          schema:
            $ref: "#/components/schemas/ID"
          required: true
          
        - name: postid
          in: path
          schema:
            $ref: "#/components/schemas/ID"
          required: true
      
      responses:
        "204":
          description: |- 
            specify if the post in the user profile was correctly deletated
            
        '400':
            description: Bad request. Invalid user data.
            
        '401':
            $ref: '#/components/responses/UnauthorizedError'

        "404":
          description: Resource not found
          
        "500":
          description: Internal server error 
          
  # FOLLOW USER        
  # user want to  follow an user 
  /users/{userid}/following:
    post:
      security:
        - bearerAuth: []
      tags:
        - Users
      operationId: followUser
      summary: Start follow another user
      description: |-
        An user wants to start to follow another user 
      
      parameters:
        - name: userid
          in: path
          description: ID of the user who want to follow another user
          schema:
            $ref: "#/components/schemas/ID" 
          required: true 
      
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: "ID of the user that we want to follow, so ID of the user to be followed"
              properties:
                followedID:
                  # ID of the user that we want to follow, so ID of the user to be followed.
                  $ref: "#/components/schemas/ID"
                followingUsername:
                  type: string
                  pattern: '^.*?$'
                  description: Username of the user to be followed.
                  example: 'el_jefe'
      
      responses:
        "201":
          description: user followed successfully 
          content:
            application/json:
              schema:
                type: object
                description: "ID of the user that we want to follow, so ID of the user to be followed."
                properties:
                
                  followedID:
                    # ID of the user that we want to follow, so ID of the user to be followed.
                    $ref: "#/components/schemas/ID"
               
                  followingUsername:
                    type: string
                    pattern: "ˆ.*?$"
                    description: Username of the user to be followed.
                    example: 'el_jefe'
        '400':
            description: Bad request. Invalid user data.
            
        '401':
            $ref: '#/components/responses/UnauthorizedError'
        
        "404":
          description: Resource not found
        
        "500":
          description: Internal server error 
        
  # UNFOLLOW USER
  # user want ot unfollow and user that start follow early
  /users/{userid}/following/{followedid}:
    delete:
      security: 
        - bearerAuth: []
      tags:
        - Users
      operationId: unfollowUser
      summary: user unfollow an user
      description: |-
        User want to unfollow  another user that follow in past
      parameters:
        - name: userid
          in: path
          schema:
            $ref: "#/components/schemas/ID"
          required: true
        
        - name: followedid
          in: path
          schema:
            $ref: "#/components/schemas/ID"
          required: true
          
      responses:
        "204":
          description: |- 
            specify if the followed user is not more in the collection of folliwing users 
            
        '400':
            description: Bad request. Invalid user data.
            
        '401':
            $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Resource not found
          
        "500":
          description: Internal server error 
          
  # BAND USER
  # here we create a collection of muted user for a particular userid    
  /users/{userid}/muted/:    
  # /users/{userid}/muted/{muteduserid}:
    post:
      security: 
        - bearerAuth: []
      tags:
        - Users
      summary: bandUser
      description: |-
        Mutes another user, preventing them from interacting with the specified user.
      parameters:
        - name: userid
          in: path
          description: ID of the user who wants to mute another user.
          required: true
          schema:
            $ref: "#/components/schemas/ID"
            
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: "ID of the user to be muted."
              properties:
                mutedUserId:
                  # ID of the user to be muted.
                  $ref: "#/components/schemas/ID"
      responses:
        '201':
          description: User muted successfully.
          content:
            application/json:
              schema:
                type: object
                description: "the userid of the muted person"
                properties:
                  mutedUserId:
                    # ID of the user to be muted.
                    $ref: "#/components/schemas/ID"

        '400':
            description: Bad request. Invalid user data.
            
        '401':
            $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found.
        '500':
          description: Internal server error.

  # UNBAND USER
  # here we want to unmute an user from the muted collection 
  /users/{userid}/muted/{mutedUserid}:
    delete:
      security:
        - bearerAuth: []
      tags:   
        - Users
      summary: unbandUser
      description: |-
        Allows a user to unmute another user, allowing them to interact again.
      parameters:
        - name: userid
          in: path
          description: ID of the user who wants to unmute another user.
          required: true
          schema:
            $ref: "#/components/schemas/ID"
        - name: mutedUserid
          in: path
          description: ID of the user to be unmuted.
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      responses:
        '204':
          description: User unmuted successfully.
        '400':
            description: Bad request. Invalid user data.
            
        '401':
            $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found or not muted.
        '500':
          description: Internal server error.  
          
  # GET USER PROFILE 
  # we use the path , without including the query parameters directly in the path, 
  #it should be done when an user makes a request to search an user e.g  /users/{userid}/profile?username=desiredUsername
  /users/{userid}/profile:
    get:
      security:
        - bearerAuth: []
      tags:
        - Users
        - Profiles
      operationId: getUserProfile
      summary: user search another user 
      description: |-
        an user search another user by name and try to get a possible resoult that match with his request 
      parameters:
        - name: userid
          in: path
          description: user id who is looking for another user 
          schema:
            $ref: "#/components/schemas/ID"
          required: true
          
        - name: username
          in: query
          description: username to search for 
          schema:
            type: string
            description: "username of the interesting profile"
            pattern: "^.*?$"
          required: true
          
      responses:
        # we use 200 instead of 201 because we are not creating a resource and we are just safistying a request
        "200":
          description: User profile found successfully 
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile"}

        '400':
            description: Bad request. Invalid user data.
            
        '401':
            $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: No user profiles found for the provided username.
        '500':
          description: Internal server error.
          
  # GET MY STREAM 
  /users/{userid}/stream:
  
    get:
      security:
        - bearerAuth: []
      tags:
        - Profile
        - Users
      operationId: getMyStream
      summary: Get the stream of an specific user
      description: |-
        an user wanna get the stream, so where all the post of the following users the user follow are posted.
      parameters:
        - name: userid
          in: path
          schema:
            $ref: "#/components/schemas/ID"
          required: true
      
      responses:
        "200":
          description: user stream with all the post of the followed users 
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Stream"}
        '400':
            description: Bad request. Invalid user data.
            
        '401':
            $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: No user profiles found for the provided username.
        '500':
          description: Internal server error.